{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf600
{\fonttbl\f0\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red53\green53\blue53;}
{\*\expandedcolortbl;;\cssrgb\c27059\c27059\c27059;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs34 \cf2 \expnd0\expndtw0\kerning0
IAM :-
\b0 \

\b IAM infrastructure includes the following elements:-
\b0 \
   Principal   \
   Request \
   Authentication \
   Authorization \
   Action\
   Resources\
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs34 \cf2 When users, groups & roles are created they are available all over the world.
\b0 \

\b New users have no permissions when first created
\b0 \
\

\b IAM user Arn: arn:aws:iam::accountid without hyphen:user/bob
\b0 \

\b AWS console signin link:- https://myawsaccountid.signin.aws.amazon.com/console/
\b0 \
\pard\pardeftab720\partightenfactor0

\fs24 \cf2 \
\pard\pardeftab720\partightenfactor0

\b\fs34 \cf2 Principal:- defines who is going to access aws resources
\b0 \

\b Principal can be:- 
\b0 \

\b     
\b0 -Root user\
    -IAM user \
    -Roles/Temporary security tokens\
\

\b There are three ways that IAM authenticates a principal
\b0 \
   -username/password\
   -IAM user\
   -Accesskey/ Session Token\
\

\b When a principal sends a request via console, cli, sdks or apis include following:-
\b0 \
   -Actions that the principal wants to perform\
   -Resources upon which the actions are performed\
   -principal information including the environment from which the request was made\
\

\b IAM can be accessed using:- console, cli, sdk , api
\b0 \

\b Power users are those who have the full access to aws services except IAM users, groups, roles, billing
\b0 \
\
\

\b Two types of policies:-
\b0 \
  -Identity Based Policies (based on user, role, federated user, application.)\
     1)Managed Policy\
           A)AWS managed policy\
           B)Customer managed policy \
     2)Inline policies\
  -Resource based policies (these policies are attached to resources like s3 bucket)\
\

\b Identity based policies has following elements:-
\b0 \
   -Effect\
   -Service\
   -Resource\
   -Action\
   -Condition\
\

\b 1 explicit deny will override all explicit allow in the policy 
\b0 \

\b 1 explicit allow will override all implicit deny in the policy
\b0 \
\
\

\b Cross account access can be done in two ways:-
\b0 \
    -Assuming Roles\
    -Resource based policy\
\

\b Cross account access with a resource based policy has an advantage over a role , with a resource that is accessed through a resource based policy , the user still works in the trusted account and does not  have to give up his or her user permissions in place of the role permissions.
\b0 \
\
\
\

\b STS has multiple apis to request session token (temporary security credentials)
\b0 \
   -AssumeRole\
     Who can call:- IAM user or user with existing temporary security credentials\
   -AssumeRolewithSAML\
      Who can call:- caller must pass a SAML authentication response that indicates authentication from a known identity provider\
   -AssumeRolewithWebIdentities\
      Who can call:-Any user , caller must pass a web identity token that indicates authentication form a known identity provider.\
   -GetSessionToken \
      Who can call:-IAM user or AWS account root user\
   -GetFederationToken\
      Who can call:- IAM users or aws account root user\
\
\

\b There are two ways to assume a role
\b0 \
   - Interactively in the IAM console\
   - Programmatically with the AWS CLI \
\

\b IAM role delegation :- To delegate permission to access a resource you create an IAM role that has two policies attached
\b0 \
   - permission policy where action & resources the role can assumed are defined.\
   - trust policy specifies which trusted accounts are allowed to grant its user permissions to assume the role.}